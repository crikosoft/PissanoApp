@model PissanoApp.ViewModels.OrdenCompraViewModel

@{
    ViewBag.Title = "Edit";
}
@Html.HiddenFor(model => model.TipoCompra.tipoCompraId)
@Html.HiddenFor(model => model.Ordenes[0].ordenCompraId)

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>Orden de Compra</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("Lista", "Index")
            </li>
            <li class="active">
                <strong>Creación de Orden de Compra</strong>
            </li>
        </ol>
    </div>
    <div class="col-lg-2">

    </div>
</div>



<div class="form-horizontal">
    @*<h4>Crear Orden de Compra</h4>
    <hr />*@
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.Requerimiento.requerimientoId, new { id = "requerimientoId" })

    <div class="row">
        <div class="col-xs-12">
            @*<input value="Guardar!" class="btn btn-primary" id="BtnGuardar" />*@
            <button class="ladda-button ladda-button-demo btn btn-primary btn-lg" id="BtnGuardar"><i class="fa fa-save"></i> Guardar!</button>
        </div>
    </div>


    @*<input type="text" class="form-control" tabindex="3" id="requerimientoId" value="@Html.DisplayFor(model => model.Requerimiento.requerimientoId)">*@



    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <h5>Cabecera</h5>
            <div class="ibox-tools">
                <a class="collapse-link">
                    <i class="fa fa-chevron-up"></i>
                </a>
            </div>
        </div>
        <div class="ibox-content">
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <label class="control-label" for="order_id">Proveedor</label>
                        @Html.DropDownListFor(x => x.Proveedores[0].proveedorId, (IEnumerable<SelectListItem>)ViewBag.proveedor, new { @class = "chosen-select", @id = "proveedor", @style = "width:350px;" })
                        @Html.ValidationMessageFor(model => model.Ordenes[0].proveedorId)
                    </div>
                </div>
                <div class="col-sm-4">
                    <label class="control-label" for="order_id">Form de Pago</label>
                    @Html.DropDownListFor(x => x.FormasPago[0].formaPagoId, (IEnumerable<SelectListItem>)ViewBag.formaPago, new { @class = "chosen-select", @id = "formaPago", @style = "width:350px;" })
                    @Html.ValidationMessageFor(model => model.Ordenes[0].formaPagoId)
                </div>

                <div class="col-sm-4">


                    <label class="control-label" for="order_id">Moneda</label>
                    @Html.DropDownListFor(x => x.Monedas[0].monedaId, (IEnumerable<SelectListItem>)ViewBag.moneda, new { @class = "chosen-select", @id = "moneda", @style="width:350px;" })
                    @Html.ValidationMessageFor(model => model.Ordenes[0].monedaId)

                    @*<select data-placeholder="Elija la Moneda..." class="chosen-select" style="width:350px;" tabindex="1" id="moneda">
                        <option value="">Seleccione</option>

                        @foreach (var item in Model.Monedas)
                        {
                            <option value=@Html.DisplayFor(modelItem => item.monedaId)>
                                @Html.DisplayFor(modelItem => item.nombre)
                            </option>
                        }
                    </select>*@

                </div>
                <div class="col-sm-12">
                    <div class="form-group">
                        @*<label class="font-noraml col-sm-2 control-label">Comentario</label>
                            <div class="col-sm-10">

                            </div>*@
                        <label class="control-label" for="order_id">Comentario</label>
                        @*<input type="text" class="form-control" tabindex="3" id="comentario"> <span class="help-block m-b-none">Agregue algún comentario a considerar durante la Orden de Compra</span>*@
                        <input type="text" class="form-control" tabindex="3" id="comentario" value="@Html.DisplayFor(model => model.Ordenes[0].comentario)"> <span class="help-block m-b-none">Agregue algún comentario a considerar durante la Orden de Compra</span>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="wrapper wrapper-content animated fadeInRight">
        <div class="row">
            <div class="col-lg-8">
                <div class="ibox float-e-margins">
                    <div class="ibox-title">
                        <h5>Ingrese el precio de los materiales que desee generar OC. Use el Filtro de Búsqueda</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>

                        </div>
                    </div>
                    <div class="ibox-content">

                        <table class="table table-striped table-bordered table-hover dataTables-example" id="editableMaterial">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th hidden="hidden">Código</th>
                                    <th>Material</th>
                                    <th>Unidad de Medida</th>
                                    <th>Cantidad Solicitada</th>
                                    <th>Precio</th>
                                    <th hidden="hidden">DetalleId</th>
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var item in Model.Requerimiento.Detalles.Where(p => p.ordenCompraId == Model.Ordenes[0].ordenCompraId || p.EstadoRequerimientoDetalle.nombre == "Aprobado"))
                                {



                                    <tr class="gradeX">
                                        <td>@Html.DisplayFor(modelItem => item.Material.materialId)</td>
                                        <td hidden="hidden">@Html.DisplayFor(modelItem => item.Material.codigo)</td>

                                        <td><a data-toggle="tab" href="#contact-@Html.DisplayFor(modelItem => item.Material.materialId)" class="client-link">@Html.DisplayFor(modelItem => item.Material.nombre)</a></td>
                                        <td>@Html.DisplayFor(modelItem => item.Material.UnidadMedida.nombre)</td>
                                        <td>@Html.DisplayFor(modelItem => item.cantidad)</td>
                                        @if (item.ordenCompraId == Model.Ordenes[0].ordenCompraId)
                                        {
                                            <td>
                                                
                                                <input type="text" class="form-control" id="precio" value="@Html.DisplayFor(modelItem => Model.Ordenes[0].OrdenesCompraDetalles.Where(p => p.materialId == item.materialId).FirstOrDefault().precioUnitario)">
                                        </td>
                                        }
                                        else
                                        {
                                        <td><input type="text" class="form-control" id="precio"></td>

                                        }

                                        <td hidden="hidden">@Html.DisplayFor(modelItem => item.requerimientoDetalleId)</td>
                                    </tr>
                                }



                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>Id</th>
                                    <th hidden="hidden">Código</th>
                                    <th>Material</th>
                                    <th>Unidad de Medida</th>
                                    <th>Cantidad</th>
                                    <th>Precio</th>
                                    <th hidden="hidden">DetalleId</th>
                                </tr>
                            </tfoot>
                        </table>


                    </div>
                </div>
            </div>

            <div class="col-sm-4">

                <div class="ibox ">
                    <div class="ibox-content">
                        <div class="tab-content">
                            <strong>Totales</strong>

                            <ul class="list-group clear-list">
                                <li class="list-group-item fist-item">
                                    <span class="pull-right"><label class="control-label" id="lblSubTotal">@Html.DisplayFor(model => model.Ordenes[0].subTotal)</label> </span>
                                    SubTotal
                                </li>
                                <li class="list-group-item">
                                    <span class="pull-right"> <label class="control-label" id="lblIgv">@Html.DisplayFor(model => model.Ordenes[0].igv)</label> </span>
                                    IGV
                                </li>
                                <li class="list-group-item">
                                    <span class="pull-right"> <label class="control-label" id="lblTotal">@Html.DisplayFor(model => model.Ordenes[0].total)</label> </span>
                                    Total
                                </li>

                            </ul>

                            <button type="button" class="btn btn-default btn-sm btn-block" id="BtnCalcular">
                                <i class="fa fa-calculator"></i> Calcular
                            </button>
                        </div>
                    </div>

                </div>

                <div class="ibox ">

                    <div class="ibox-content">
                        <div class="tab-content">

                            @foreach (var item in Model.Requerimiento.Detalles.Where(p => p.ordenCompraId == Model.Ordenes[0].ordenCompraId || p.EstadoRequerimientoDetalle.nombre == "Aprobado"))
                            {

                                <div id="contact-@Html.DisplayFor(modelItem => item.Material.materialId)" class="tab-pane">
                                    <div class="row m-b-lg">
                                        @*<div class="col-lg-4 text-center">
                                                <h2>Nicki Smith</h2>

                                                <div class="m-b-sm">
                                                    <img alt="image" class="img-circle" src="~/Images/a2.jpg"
                                                         style="width: 62px">
                                                </div>
                                            </div>*@
                                        <div class="col-lg-12">
                                            <strong>
                                                @Html.DisplayFor(modelItem => item.Material.nombre)
                                            </strong>

                                            @*<p>
                                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                                                    tempor incididunt ut labore et dolore magna aliqua.
                                                </p>
                                                <button type="button" class="btn btn-primary btn-sm btn-block">
                                                    <i class="fa fa-envelope"></i> Send Message
                                                </button>*@
                                        </div>
                                    </div>
                                    <div class="client-detail">
                                        <div class="full-height-scroll">

                                            @*<strong>Información a Considerar</strong>

                                                <ul class="list-group clear-list">
                                                    <li class="list-group-item fist-item">
                                                        <span class="pull-right">100 soles </span>
                                                        Avance Partida de Control
                                                    </li>
                                                    <li class="list-group-item">
                                                        <span class="pull-right"> 10:16 am </span>
                                                        Sign a contract
                                                    </li>
                                                    <li class="list-group-item">
                                                        <span class="pull-right"> 08:22 pm </span>
                                                        Open new shop
                                                    </li>

                                                </ul>
                                                <strong>Notes</strong>
                                                <p>
                                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                                                    tempor incididunt ut labore et dolore magna aliqua.
                                                </p>
                                                <hr />*@
                                            <strong>Comparación de Precios</strong>
                                            <div id="vertical-timeline" class="vertical-container dark-timeline">
                                                <div class="vertical-timeline-block">
                                                    <div class="vertical-timeline-icon gray-bg">
                                                        <i class="fa fa-coffee"></i>
                                                    </div>
                                                    <div class="vertical-timeline-content">
                                                        <p>
                                                            @{
                                double? maxValue = 0;
                                string maxProveedor = "";


                                if (item.Material.OrdenCompraDetalles.Count > 0)
                                {
                                    maxValue = item.Material.OrdenCompraDetalles.Max(p => p.precioUnitario);
                                    maxProveedor = item.Material.OrdenCompraDetalles.Where(p => p.precioUnitario == maxValue).FirstOrDefault().OrdenCompra.Proveedor.razonSocial;

                                }

                                                            }
                                                            Precio Mayor: @Html.DisplayFor(modelItem => maxValue)
                                                        </p>
                                                        <p>
                                                            Proveedor: @Html.DisplayFor(modelItem => maxProveedor)
                                                        </p>
                                                        <span class="vertical-date small text-muted"> 2:10 pm - 12.06.2014 </span>
                                                    </div>
                                                </div>
                                                <div class="vertical-timeline-block">
                                                    <div class="vertical-timeline-icon gray-bg">
                                                        <i class="fa fa-briefcase"></i>
                                                    </div>
                                                    <div class="vertical-timeline-content">
                                                        <p>
                                                            @{
                                double? minValue = 0;
                                string minProveedor = "";


                                if (item.Material.OrdenCompraDetalles.Count > 0)
                                {
                                    minValue = item.Material.OrdenCompraDetalles.Min(p => p.precioUnitario);
                                    minProveedor = item.Material.OrdenCompraDetalles.Where(p => p.precioUnitario == minValue).Last().OrdenCompra.Proveedor.razonSocial;

                                }

                                                            }
                                                            Precio Menor: @Html.DisplayFor(modelItem => minValue)
                                                        </p>
                                                        <p>
                                                            Proveedor: @Html.DisplayFor(modelItem => minProveedor)
                                                        </p>
                                                        <span class="vertical-date small text-muted"> 4:20 pm - 10.05.2014 </span>
                                                    </div>
                                                </div>
                                                <div class="vertical-timeline-block">
                                                    <div class="vertical-timeline-icon gray-bg">
                                                        <i class="fa fa-bolt"></i>
                                                    </div>
                                                    <div class="vertical-timeline-content">
                                                        <p>
                                                            @{
                                double? lastValue = 0;
                                string lastProveedor = "";


                                if (item.Material.OrdenCompraDetalles.Count > 0)
                                {
                                    lastValue = item.Material.OrdenCompraDetalles.LastOrDefault().precioUnitario;
                                    lastProveedor = item.Material.OrdenCompraDetalles.Where(p => p.precioUnitario == lastValue).Last().OrdenCompra.Proveedor.razonSocial;

                                }

                                                            }
                                                            Último Precio: @Html.DisplayFor(modelItem => lastValue)
                                                        </p>
                                                        <p>
                                                            Proveedor: @Html.DisplayFor(modelItem => lastProveedor)
                                                        </p>
                                                        <span class="vertical-date small text-muted"> 06:10 pm - 11.03.2014 </span>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>





</div>




<div>
    @Html.ActionLink("Back to List", "Index")
</div>




@section Styles {

    @Styles.Render("~/plugins/awesomeCheckboxStyles")
    @Styles.Render("~/plugins/clockpickerStyles")
    @Styles.Render("~/plugins/dateRangeStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
    @Styles.Render("~/plugins/switcheryStyles")
    @Styles.Render("~/plugins/jasnyBootstrapStyles")
    @Styles.Render("~/plugins/nouiSliderStyles")
    @Styles.Render("~/plugins/dataPickerStyles")
    @Styles.Render("~/Content/plugins/ionRangeSlider/ionRangeStyles")
    @Styles.Render("~/plugins/imagecropperStyles")
    @Styles.Render("~/Content/plugins/colorpicker/colorpickerStyles")
    @Styles.Render("~/plugins/select2Styles")
    @Styles.Render("~/plugins/touchSpinStyles")
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
@Styles.Render("~/plugins/laddaStyles")
}

@section Scripts {
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/ionRange")
    @Scripts.Render("~/plugins/nouiSlider")
    @Scripts.Render("~/plugins/jasnyBootstrap")
    @Scripts.Render("~/plugins/switchery")
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/knob")
    @Scripts.Render("~/plugins/imagecropper")
    @Scripts.Render("~/plugins/colorpicker")
    @Scripts.Render("~/plugins/clockpicker")
    @Scripts.Render("~/plugins/dateRange")
    @Scripts.Render("~/plugins/select2")
    @Scripts.Render("~/plugins/touchSpin")
    @Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/plugins/jeditable")
@Scripts.Render("~/plugins/ladda")

    <script type="text/javascript">
    $(document).ready(function () {

        // Manejo Tables

        $('.dataTables-example').DataTable({
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'copy' },
                { extend: 'csv' },
                { extend: 'excel', title: 'ExampleFile' },
                { extend: 'pdf', title: 'ExampleFile' },

                {
                    extend: 'print',
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                                .addClass('compact')
                                .css('font-size', 'inherit');
                    }
                }
            ]

        });

        /* Init DataTables */
        var oTable = $('#editable').dataTable();

        /* Apply the jEditable handlers to the table */
        oTable.$('td').editable('../example_ajax.php', {
            "callback": function (sValue, y) {
                var aPos = oTable.fnGetPosition(this);
                oTable.fnUpdate(sValue, aPos[0], aPos[1]);
            },
            "submitdata": function (value, settings) {
                return {
                    "row_id": this.parentNode.getAttribute('id'),
                    "column": oTable.fnGetPosition(this)[2]
                };
            },

            "width": "90%",
            "height": "100%"
        });

        // Fin Manejo Tables


        $("#btnAgregar_2").click(function () {
            //window.open($image.cropper("getDataURL"));
            //alert("hola");
        });





        $("#BtnGuardar").click(function () {

            var cells = [];
            var rows = $("#editableMaterial").dataTable().fnGetNodes();
            //alert(rows.length);
            for (var i = 0; i < rows.length; i++) {

                if ($(rows[i]).find("td:eq(5) input[type='text']").val() != "") {
                    cells.push({

                        precio: $(rows[i]).find("td:eq(5) input[type='text']").val(),
                        materialid: $(rows[i]).find("td:eq(0)").html(),
                        cantidad: $(rows[i]).find("td:eq(4)").html(),
                        detalleId: $(rows[i]).find("td:eq(6)").html(),
                    });
                }
            }

            //alert(cells);

            //var data = $.parseJSON(cells);
            var Detalles = [];

            for (var i = 0; i < cells.length; i++) {
                var ordenDetalle = new Object();

                ordenDetalle.materialId = cells[i].materialid;
                ordenDetalle.precioUnitario = cells[i].precio;
                ordenDetalle.cantidad = cells[i].cantidad;
                ordenDetalle.precioTotal = 10;
                ordenDetalle.estadoOrdenDetalleId = 1;
                ordenDetalle.ordenCompradetalleId = cells[i].detalleId;
                Detalles.push(ordenDetalle);

            }


            var ordenCompra = new Object();

            ordenCompra.ordenCompraId = $("#Ordenes_0__ordenCompraId").val();
            ordenCompra.proveedorId = $("#proveedor").val();
            ordenCompra.requerimientoId = $("#requerimientoId").val();;
            ordenCompra.formaPagoId = $("#formaPago").val();
            ordenCompra.monedaId = $("#moneda").val();
            ordenCompra.comentario = $("#comentario").val();
            ordenCompra.subTotal = 10;
            ordenCompra.igv = 10;
            ordenCompra.total = 100;
            ordenCompra.estadoOrdenId = 1;

            ordenCompra.adelanto = 1;
            ordenCompra.obraId = 1;
            ordenCompra.numero = "OC100";
            ordenCompra.usuarioCreacion = "aa";


            ordenCompra.OrdenesCompraDetalles = Detalles;

            var requerimientoViewModel = new Object();

            //requerimientoViewModel.Requerimiento = requerimiento

            OrdenCompraFinal = JSON.stringify({ 'ordenCompra': ordenCompra });

            //alert(OrdenCompraFinal);


            $.ajax({
                contentType: 'application/json; charset=utf-8',
                //dataType: 'json', // Tells the server what kind of content the client is expecting back as the result.
                type: 'POST',
                //          param: RequerimientoFinal,
                url: '@Url.Action("EditarOrdenCompra")',
                data: OrdenCompraFinal,
                success: function (data) {
                    //alert('success');
                    window.location = '@Url.Action("Index/" + @Html.DisplayFor(model => model.TipoCompra.tipoCompraId))';
                },
                error: function (result) {
                    l.ladda('stop');
                    alert('No se pudo insertar. Revise que toda la información esté seleccionada');

                }


                })
                .done(function (result) {
                //alert("pasó");
            });




        });


        $("#requerimientoId").css('visibility', 'hidden');


        $("#BtnCalcular").click(function () {

            var cells = [];
            var rows = $("#editableMaterial").dataTable().fnGetNodes();
            //alert(rows.length);
            for (var i = 0; i < rows.length; i++) {

                if ($(rows[i]).find("td:eq(5) input[type='text']").val() != "") {
                    cells.push({

                        precio: $(rows[i]).find("td:eq(5) input[type='text']").val(),
                        cantidad: $(rows[i]).find("td:eq(4)").html()
                    });
                }
            }

            var subtotal = 0;
            var igv = 0;
            var total = 0;

            for (var i = 0; i < cells.length; i++) {
                subtotal = subtotal + cells[i].precio * cells[i].cantidad;
            }

            igv = subtotal * 0.18;
            total = subtotal + subtotal * 0.18;

            $('#lblSubTotal').text(subtotal.toFixed(2));
            $("#lblIgv").text(igv.toFixed(2));
            $("#lblTotal").text(total.toFixed(2));

        });


        //Procesar botón hasta que termine el proceso
        var l = $('.ladda-button-demo').ladda();
        l.click(function () {
            // Start loading
            l.ladda('start');
            // Do something in backend and then stop ladda
            // setTimeout() is only for demo purpose

            context: $(this)
            //l.ladda('stop');
        });


        });





        var config = {
            '.chosen-select': {},
            '.chosen-select-deselect': { allow_single_deselect: true },
            '.chosen-select-no-single': { disable_search_threshold: 10 },
            '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
            '.chosen-select-width': { width: "95%" }
        }
        for (var selector in config) {
            $(selector).chosen(config[selector]);
        }

        $("#ionrange_1").ionRangeSlider({
            min: 0,
            max: 5000,
            type: 'double',
            prefix: "$",
            maxPostfix: "+",
            prettify: false,
            hasGrid: true
        });

        $("#ionrange_2").ionRangeSlider({
            min: 0,
            max: 10,
            type: 'single',
            step: 0.1,
            postfix: " carats",
            prettify: false,
            hasGrid: true
        });

        $("#ionrange_3").ionRangeSlider({
            min: -50,
            max: 50,
            from: 0,
            postfix: "°",
            prettify: false,
            hasGrid: true
        });

        $("#ionrange_4").ionRangeSlider({
            values: [
                "January", "February", "March",
                "April", "May", "June",
                "July", "August", "September",
                "October", "November", "December"
            ],
            type: 'single',
            hasGrid: true
        });

        $("#ionrange_5").ionRangeSlider({
            min: 10000,
            max: 100000,
            step: 100,
            postfix: " km",
            from: 55000,
            hideMinMax: true,
            hideFromTo: false
        });

        $(".dial").knob();


        function fnClickAddRow() {
            $('#editableMaterial').dataTable().fnAddData([
                "1",
                "sdsdsd",
                "dsdssd",
                "sdsd",
                "sdsdds"]);

        }





    </script>
}
